registro Empleado
    cadena[30] nombre
    real ventas,comis,ihss,tp

fin registro

arreglo[5] de empleado emple

/*
class Empleado:
    def __init__(self, nombre, ventas, comis, ihss, tp):
        self.nombre = nombre
        self.ventas = ventas
        self.comis = comis
        self.ihss = ihss
        self.tp = tp
*/

procedimiento seguro
cadena[10] s
inicio
    si sueldo >2400 entonces
        s <- "hola"
        sino
        s <- "adios"
    fin si

    retorne s
fin

inicio
    resultado <- seguro(1000,2)
fin


/*registro Empleado
    cadena[30] nombre
    real ventas,comis,ihss,tp
fin registro

arreglo[5] de empleado emple

funcion seguro(real sueldo) : real
inicio
    si sueldo >2400 entonces
        retorne 84
        sino
        retorne 0.035*sueldo
    fin si
fin

procedimiento Ingreso(var arreglo[5] de empleado emple)
    entero i
inicio
    para i <- 1 hasta 2 haga
        Escriba "ingresar Nombre del Empleado "
        lea emple[i].nombre
        Escriba "Ingresar las ventas "
        lea emple[i].ventas
    Fin Para
fin

procedimiento Calculo(var arreglo[5] de empleado emple)
    entero I
inicio
    para i <- 1 hasta 2 haga
        emple[i].comis<-emple[i].ventas*0.05
        emple[i].ihss<-seguro(emple[i].comis)
        emple[i].tp<-emple[i].comis-emple[i].ihss
    Fin Para
fin

Procedimiento Presentar(arreglo[5] de empleado emple)
    entero i
inicio
    para i <- 1 hasta 2 haga
        Escriba "Empleado ",emple[i].nombre
        Llamar Nueva_linea
        Escriba "ComisiÃ³n ..:", emple[i].comis
        Llamar Nueva_linea
        Escriba "Seguro Social..:", emple[i].ihss
        Llamar Nueva_linea
        Escriba "Total a Pagar ..:", emple[i].tp
        Llamar Nueva_linea
        Llamar Nueva_linea
    Fin Para
Fin
    
inicio
    llamar ingreso(emple)
    llamar calculo(emple)
    llamar presentar(emple)
fin*/



/*
// ejemplo de programa con ciclo repita
entero acumulador
entero i
inicio
    i<-0
    acumulador<-0
    repita
        escriba ("Valor del acumulador en la iteracion: "),(acumulador)
        llamar nueva_linea
        i<-i+1
        acumulador<-acumulador+(i*2)
    hasta (i=20) o (acumulador mod 5=4)
fin
*/